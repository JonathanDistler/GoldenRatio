import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D
from tensorflow.keras.applications import MobileNetV2
from sklearn.preprocessing import LabelEncoder

# Load and preprocess images
img_path = 'path_to_your_image.jpg'
img = load_img(img_path, target_size=(224, 224))
img_array = img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

# Load MobileNetV2 (pre-trained model)
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze base layers
base_model.trainable = False

# Build the new classification head
model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(3, activation='softmax')  # 3 categories: 'Low', 'Average', 'Fit'
])

# Compile model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Load sample labels (e.g., 'Low', 'Average', 'Fit')
labels = ['Low', 'Average', 'Fit']
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(labels)

# Make prediction
prediction = np.argmax(model.predict(img_array))
print("Predicted Muscle Tone:", label_encoder.inverse_transform([prediction])[0])
