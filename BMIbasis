import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D
from tensorflow.keras.applications import MobileNetV2
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import os

# Step 1: Load and prepare the dataset
image_dir = 'path_to_dataset/'
bmi_classes = ['Underweight', 'Normal', 'Overweight', 'Obese']
images, labels = [], []

for category in bmi_classes:
    category_dir = os.path.join(image_dir, category)
    for img_file in os.listdir(category_dir):
        img_path = os.path.join(category_dir, img_file)
        img = load_img(img_path, target_size=(224, 224))
        img_array = img_to_array(img) / 255.0
        images.append(img_array)
        labels.append(category)

images = np.array(images)
labels = np.array(labels)

# Encode labels
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(labels)

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(images, y_encoded, test_size=0.2, random_state=42)

# Step 2: Define data augmentation
train_datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Step 3: Load MobileNetV2 as a feature extractor
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
base_model.trainable = False

# Step 4: Build the BMI classification head
model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dense(256, activation='relu'),
    Dropout(0.4),
    Dense(len(bmi_classes), activation='softmax')
])

# Step 5: Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Step 6: Train the model
history = model.fit(train_datagen.flow(X_train, y_train, batch_size=32), epochs=15, validation_data=(X_test, y_test))

# Step 7: Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {accuracy * 100:.2f}%')

# Step 8: Make a prediction on a new image
new_img_path = 'path_to_new_image.jpg'
new_img = load_img(new_img_path, target_size=(224, 224))
new_img_array = img_to_array(new_img) / 255.0
new_img_array = np.expand_dims(new_img_array, axis=0)
prediction = np.argmax(model.predict(new_img_array))

predicted_label = label_encoder.inverse_transform([prediction])[0]
print("Predicted BMI Category:", predicted_label)

# Step 9: Visualize prediction
plt.imshow(load_img(new_img_path))
plt.title(f"Predicted: {predicted_label}")
plt.axis('off')
plt.show()

# Step 10: Visualize training history
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.title('Accuracy Over Epochs')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.title('Loss Over Epochs')

plt.show()

# Step 11: Recommend workout based on BMI category
def recommend_workout(bmi_category):
    workout_plan = {
        'Underweight': "Focus on strength training and muscle gain: weightlifting, resistance exercises, and a calorie-surplus diet.",
        'Normal': "Maintain a balanced routine: mix of strength training, cardio, and flexibility exercises.",
        'Overweight': "Prioritize fat loss and endurance: cardio (running, cycling, swimming) and moderate strength exercises.",
        'Obese': "Focus on low-impact cardio (walking, swimming) to burn fat safely, with light strength exercises to build muscle gradually."
    }
    return workout_plan.get(bmi_category, "No recommendation available.")

# Get workout recommendation
workout_recommendation = recommend_workout(predicted_label)
print("Workout Recommendation:", workout_recommendation)
