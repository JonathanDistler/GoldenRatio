import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.metrics import accuracy_score, classification_report

# Sample dataset (you can replace this with actual data)
data = {
    'Height_cm': [170, 165, 180, 175, 160, 155, 182, 172],
    'Weight_kg': [70, 60, 85, 77, 55, 50, 90, 68],
    'Body_Fat_Percentage': [20, 18, 25, 22, 15, 12, 30, 19],
    'Muscle_Tone': ['Average', 'Fit', 'Average', 'Average', 'Fit', 'Fit', 'Low', 'Fit']
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Define features and labels
X = df[['Height_cm', 'Weight_kg', 'Body_Fat_Percentage']]
y = df['Muscle_Tone']

# Encode labels
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build a neural network model with Dropout layers
model = Sequential([
    Dense(16, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.3),
    Dense(8, activation='relu'),
    Dropout(0.3),
    Dense(len(np.unique(y_encoded)), activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=4, verbose=1)

# Make predictions
y_pred = np.argmax(model.predict(X_test), axis=-1)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Example prediction
new_person = np.array([[178, 72, 18]])  # Height, Weight, Body Fat %
new_person = scaler.transform(new_person)
prediction = np.argmax(model.predict(new_person), axis=-1)
print("Predicted Muscle Tone:", label_encoder.inverse_transform(prediction)[0])
